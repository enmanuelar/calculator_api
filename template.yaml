AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  calculator_api

  Sample SAM Template for calculator_api

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 6
Parameters:
  APIStageName:
    Default: api
    Description: StageName of API Gateway deployment
    Type: String
  Audience:
    Description: Auth0 Audience
    Type: String
  TokenIssuer:
    Description: Auth0 Token Issuer
    Type: String
  JWKSUri:
    Description: Auth0 JWKS uri
    Type: String
  DBHost:
    Description: Database Host
    Type: String
  DBUser:
    Description: Database User
    Type: String
  DBPassword:
    Description: Database Password
    Type: String
  DBSchema:
    Description: Database Schema
    Type: String
  StringGeneratorApiKey:
    Description: Random.org API Key
    Type: String
  StringGeneratorUrl:
    Description: Random.org API URL
    Type: String
Resources:
  AppApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: CalculatorAPI
      StageName: !Ref APIStageName
      Cors:
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      Auth:
        Authorizers:
          MyAuthAuthorizer:
            FunctionArn: !GetAtt AuthAuthorizer.Arn
            FunctionInvokeRole: !GetAtt AuthAuthorizerRole.Arn
            FunctionPayloadType: TOKEN
        InvokeRole: NONE
  OperationsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: operations/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Architectures:
        - arm64
      Environment:
        Variables:
          DB_HOST: !Ref DBHost
          DB_USER: !Ref DBUser
          DB_PASSWORD: !Ref DBPassword
          DB_SCHEMA: !Ref DBSchema
          TOKEN_ISSUER: !Ref TokenIssuer
      VpcConfig:
        SecurityGroupIds:
          - sg-0cae655977afe517b
        SubnetIds:
          - subnet-0bdd5ab4ac70cf08d
      Events:
        Operations:
          Type: Api
          Properties:
            Path: /v1/operations
            Method: get
            RestApiId: !Ref AppApi
            Auth:
              Authorizer: MyAuthAuthorizer
  DBProxyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: db-proxy/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Architectures:
        - arm64
      Environment:
        Variables:
          DB_HOST: !Ref DBHost
          DB_USER: !Ref DBUser
          DB_PASSWORD: !Ref DBPassword
          DB_SCHEMA: !Ref DBSchema
      VpcConfig:
        SecurityGroupIds:
          - sg-0cae655977afe517b
        SubnetIds:
          - subnet-0bdd5ab4ac70cf08d
  CreateRecordsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: records/
      Handler: app.createRecordsHandler
      Runtime: nodejs18.x
      Architectures:
        - arm64
      Environment:
        Variables:
          TOKEN_ISSUER: !Ref TokenIssuer
          STRING_GENERATOR_API_KEY: !Ref StringGeneratorApiKey
          STRING_GENERATOR_URL: !Ref StringGeneratorUrl
      Events:
        CreateRecords:
          Type: Api
          Properties:
            Path: /v1/records
            Method: post
            RestApiId: !Ref AppApi
            Auth:
              Authorizer: MyAuthAuthorizer
  GetRecordsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: records/
      Handler: app.getRecordsHandler
      Runtime: nodejs18.x
      Architectures:
        - arm64
      Environment:
        Variables:
          TOKEN_ISSUER: !Ref TokenIssuer
      Events:
        GetRecords:
          Type: Api
          Properties:
            Path: /v1/records
            Method: get
            RestApiId: !Ref AppApi
            Auth:
              Authorizer: MyAuthAuthorizer
  DeleteRecordsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: records/
      Handler: app.deleteRecordsHandler
      Runtime: nodejs18.x
      Architectures:
        - arm64
      Environment:
        Variables:
          TOKEN_ISSUER: !Ref TokenIssuer
      Events:
        DeleteRecord:
          Type: Api
          Properties:
            Path: /v1/records/{recordId}
            Method: delete
            RestApiId: !Ref AppApi
            Auth:
              Authorizer: MyAuthAuthorizer
  GetLastRecordFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: records/
      Handler: app.getLastRecordHandler
      Runtime: nodejs18.x
      Architectures:
        - arm64
      Environment:
        Variables:
          TOKEN_ISSUER: !Ref TokenIssuer
      Events:
        DeleteRecord:
          Type: Api
          Properties:
            Path: /v1/records/last
            Method: get
            RestApiId: !Ref AppApi
            Auth:
              Authorizer: MyAuthAuthorizer
  AuthAuthorizer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: auth-authorizer/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Environment:
        Variables:
          AUDIENCE: !Ref Audience
          TOKEN_ISSUER: !Ref TokenIssuer
          JWKS_URI: !Ref JWKSUri
      Architectures:
        - arm64
Outputs:
  OperationsApi:
    Description: "API Gateway endpoint URL for Operations function"
    Value: !Sub "https://${AppApi}.execute-api.${AWS::Region}.amazonaws.com/${APIStageName}/operations/"
  OperationsFunction:
    Description: "Operations Lambda Function ARN"
    Value: !GetAtt OperationsFunction.Arn
  OperationsFunctionIamRole:
    Description: "Implicit IAM Role created for Operations function"
    Value: !GetAtt OperationsFunctionRole.Arn
  CreateRecordsApi:
    Description: "API Gateway endpoint URL for CreateRecords function"
    Value: !Sub "https://${AppApi}.execute-api.${AWS::Region}.amazonaws.com/${APIStageName}/records/"
  CreateRecordsFunction:
    Description: "CreateRecords Lambda Function ARN"
    Value: !GetAtt CreateRecordsFunction.Arn
  CreateRecordsFunctionIamRole:
    Description: "Implicit IAM Role created for CreateRecords function"
    Value: !GetAtt CreateRecordsFunctionRole.Arn
  DBProxyFunction:
    Description: "DBProxy Lambda Function ARN"
    Value: !GetAtt DBProxyFunction.Arn
  DBProxyFunctionIamRole:
    Description: "Implicit IAM Role created for DBProxy function"
    Value: !GetAtt DBProxyFunctionRole.Arn
  RecordsApi:
    Description: "API Gateway endpoint URL for Records function"
    Value: !Sub "https://${AppApi}.execute-api.${AWS::Region}.amazonaws.com/${APIStageName}/records/"
  GetRecordsFunction:
    Description: "Records Lambda Function ARN"
    Value: !GetAtt GetRecordsFunction.Arn
  GetRecordsFunctionIamRole:
    Description: "Implicit IAM Role created for Records function"
    Value: !GetAtt GetRecordsFunctionRole.Arn
  DeleteRecordsFunction:
    Description: "DeleteRecord Lambda Function ARN"
    Value: !GetAtt DeleteRecordsFunction.Arn
  DeleteRecordsFunctionIamRole:
    Description: "Implicit IAM Role created for DeleteRecord function"
    Value: !GetAtt DeleteRecordsFunctionRole.Arn
  GetLastRecordFunction:
    Description: "GetLastRecord Lambda Function ARN"
    Value: !GetAtt GetLastRecordFunction.Arn
  GetLastRecordFunctionIamRole:
    Description: "Implicit IAM Role created for GetLastRecord function"
    Value: !GetAtt GetLastRecordFunctionRole.Arn
